/// B - Captain R2-D2
#include <iostream>
#include <string>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/hash_policy.hpp>

#define int long long
#define $AzH_TxdmN$ ios_base::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")

#define pb push_back
#define ep emplace_back
#define all(v) v.begin(),v.end()
#define pii pair<int,int>
using namespace std;
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> __indexed_set;
typedef tree<int,null_type,less_equal<int>,rb_tree_tag,tree_order_statistics_node_update> __indexed_multiset;
const int sz = 3e5+9;
const int MOD = 1e9+7;
const int INF = 1e18;
int dp[sz];

int n,m,s1,s2;
string s,t;

void solve()
{
    cin>>n>>m>>s>>t;
    s = '#' + s;
    t = '#' + t;
    vector<int>ind,res;
    for (int i = 1; i <= n; ++i)
    {
        dp[i] = dp[i-1] + (s[i] == '#');
        if (s[i] == 'D')
        {
            ind.ep(i);
        }
    }
    int lo = 0, hi = 0, mid = 0;
    for (int i = 1; i <= m; ++i)
    {
        mid += (t[i] == 'L' ? -1 : 1);
        lo = min(lo,mid);
        hi = max(hi,mid);
    }
    for (int &index : ind)
    {
        //printf("index = %lld, lo = %lld, hi = %lld, mid = %lld, obst between = %lld\n",index,lo,hi,mid,dp[index+hi] - dp[index+lo-1]);
        if (index+lo >= 1 && index+hi <= n && s[index+mid] != '#' && dp[index+hi] - dp[index+lo-1] == 0)
        {
            res.ep(index);
        }
    }
    cout<<(int)res.size()<<'\n';
    for (int &result : res)     cout<<result<<' ';
    if (!res.empty())           cout<<endl;
}

signed main()
{
    $AzH_TxdmN$
    int t = 1;
    //cin>>t;
    while (t--)
    {
        solve();
    }
}
